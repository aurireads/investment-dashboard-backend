version: '3.8'

services:
  db:
    image: postgres:15-alpine
    container_name: investment_db
    environment:
      POSTGRES_DB: investment_db
      POSTGRES_USER: investment_user
      POSTGRES_PASSWORD: investment_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U investment_user -d investment_db"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - investment_network

  redis:
    image: redis:7-alpine
    container_name: investment_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - investment_network

  backend:
    build: .
    container_name: investment_backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://investment_user:investment_pass@db:5432/investment_db
      - DATABASE_URL_SYNC=postgresql://investment_user:investment_pass@db:5432/investment_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production
      - DEBUG=true
      - BACKEND_CORS_ORIGINS=["http://localhost:3000","http://localhost:8080"]
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    networks:
      - investment_network
    restart: unless-stopped

  celery_worker:
    build: .
    container_name: investment_celery_worker
    command: celery -A app.tasks.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql+asyncpg://investment_user:investment_pass@db:5432/investment_db
      - DATABASE_URL_SYNC=postgresql://investment_user:investment_pass@db:5432/investment_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    networks:
      - investment_network
    restart: unless-stopped

  celery_beat:
    build: .
    container_name: investment_celery_beat
    command: celery -A app.tasks.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql+asyncpg://investment_user:investment_pass@db:5432/investment_db
      - DATABASE_URL_SYNC=postgresql://investment_user:investment_pass@db:5432/investment_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      celery_worker:
        condition: service_started
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    networks:
      - investment_network
    restart: unless-stopped

  celery_flower:
    build: .
    container_name: investment_celery_flower
    command: celery -A app.tasks.celery_app flower --port=5555
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery_worker
    networks:
      - investment_network

  nginx:
    image: nginx:alpine
    container_name: investment_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - investment_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  investment_network:
    driver: bridge
